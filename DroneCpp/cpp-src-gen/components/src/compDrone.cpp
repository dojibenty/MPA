/*
 * Drone.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compDrone.h"
#include "Drone.h"
compDrone::compDrone(double aFrequency) : LeafComponent( aFrequency) {
		appli = new Drone( this);
		delay = 0;
		delayMax = 0;
		newValue = false;
		isActive = true;
		oldPosition = appli->getPosition();
		newPosition = appli->getPosition();
	}
compDrone::~compDrone()	{}

void compDrone::doOneStep() {
		if (newValue) {
			delay++;
			if (delay == delayMax) {
					oldPosition = newPosition;
					newValue = false;
			}
		}
	}

void compDrone::doStep(int nStep) {	
		if (newValue) {
			oldPosition = newPosition;
			newValue = false;
		}
		readInputs();
		appli->doStep(nStep);
		newPosition = appli->getPosition();
		if (delayMax == 0) {
			oldPosition = newPosition;
			newValue = false;
		} else {
			newValue = true;
			delay = 0;
		}
	}

void compDrone::readInputs() {
	}
void compDrone::initialize() {
		appli->initialize();
	}

void compDrone::end() {
		appli->end();
	}
	
Vector3 compDrone::getPosition() {
		return oldPosition;
	}
Drone *compDrone::getAppli() {
		return appli;
	}
	// +++++++++++++ Access for speed parameter +++++++++++++
double compDrone::getSpeed() {
		return appli->getSpeed();
	}
	
void compDrone::setSpeed(double arg) {
		appli->setSpeed(arg);
	}
	// +++++++++++++ Access for direction parameter +++++++++++++
Vector3 compDrone::getDirection() {
		return appli->getDirection();
	}
	
void compDrone::setDirection(Vector3 arg) {
		appli->setDirection(arg);
	}
	// +++++++++++++ Access for drPosition parameter +++++++++++++
Vector3 compDrone::getDrPosition() {
		return appli->getDrPosition();
	}
	
void compDrone::setDrPosition(Vector3 arg) {
		appli->setDrPosition(arg);
	}

