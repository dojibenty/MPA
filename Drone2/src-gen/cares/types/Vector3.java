/*
 * Vector3
 *
 * Generated by Cares generator, written with Acceleo
 * Author: jpb
 */
package cares.types;

// Start of user code  : Additional imports for Vector3
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
// End of user code

public class Vector3 {

	public static final Vector3 ZERO = new Vector3(0.,0.,0.);
	public static final Vector3 FORWARD = new Vector3(1.,0.,0.);
	public static final Vector3 BACK = new Vector3(-1.,0.,0.);
	public static final Vector3 LEFT = new Vector3(0.,0.,-1.);
	public static final Vector3 RIGHT = new Vector3(0.,0.,1.);
	public static final Vector3 UP = new Vector3(0.,1.,0.);
	public static final Vector3 DOWN = new Vector3(0.,-1.,0.);
	private static final DecimalFormat df = new DecimalFormat("0.00", new DecimalFormatSymbols(Locale.US));
	
	protected Double x;
	protected Double y;
	protected Double z;

	public Vector3() {
	}

	public Vector3( Double varx, Double vary, Double varz) {
		x = varx;
		y = vary;
		z = varz;
	}

	public Double getX () {
		return x ;
	}

	public void setX (Double varx ) {
		this.x  = varx ;
	}

	public Double getY () {
		return y ;
	}

	public void setY (Double vary ) {
		this.y  = vary ;
	}

	public Double getZ () {
		return z ;
	}

	public void setZ (Double varz ) {
		this.z  = varz ;
	}

// Start of user code  : Additional methods
	@Override
	public String toString() {
		return "("+df.format(this.x)+","+df.format(this.y)+","+df.format(this.z)+")";
	}
	
	public Boolean equals(Vector3 vector3) {
		return this.x == vector3.getX() && this.y == vector3.getY() && this.z == vector3.getZ(); 
	}
	
	public Vector3 add(Vector3 vector3) {
		return new Vector3(this.x + vector3.x, this.y + vector3.y, this.z + vector3.z);
	}
	
	public Vector3 mult(Vector3 vector3) {
		return new Vector3(this.x * vector3.x, this.y * vector3.y, this.z * vector3.z);
	}
	
	public Vector3 mult(Double factor) {
        return new Vector3(this.x * factor, this.y * factor, this.z * factor);
    }

    public Vector3 div(Double divider) {
        return new Vector3(this.x / divider, this.y / divider, this.z / divider);
    }

    public Vector3 getUnitary() { return div(getNorme()); }

    public Double getNorme() { return Math.sqrt(Math.pow(getX(),2) + Math.pow(getY(),2) + Math.pow(getZ(),2)); }
    
    public static Vector3 parse(String v3str) {
        String[] components = v3str.replaceAll("()","").split(",");
        if (components.length == 3) {
            double x = Double.parseDouble(components[0]);
            double y = Double.parseDouble(components[1]);
            double z = Double.parseDouble(components[2]);
            return new Vector3(x,y,z);
        } else throw new IllegalArgumentException("Invalid Vector3 format : "+v3str);
    }
// End of user code

}

